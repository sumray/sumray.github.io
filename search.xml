<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[RabbitMq入门(一)-简单案例]]></title>
    <url>%2Fcategories%2Fmessage-queue%2F2019%2F0711-1557-a%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; 案例来自官方网站。 &#160; &#160; &#160; RabbitMq是一款遵循AMQP协议的消息中间件，由erlang语言开发。相较于kafka，RabbitMq的优势在于传输过程中消息的可靠性，但吞吐量远远低于kafka。 &#160; &#160; &#160; 本文通过一个简单的Hello World案例，来介绍RabbitMq的用法及特点。 简介 &#160; &#160; &#160; RabbitMq采用生产者消费者机制。生产者（Producer）发送一条消息，多个消费者（Consumer）消费该条消息。消息存放在队列（queue）中，以内存或者磁盘形式存储。 图1：生产者消费者模式 &#160; &#160; &#160; 当生产者发送消息到队列后，这条消息有可能被C1消费，也有可能被C2消费，这是随机的。当这条消息被消费后，它就不存在于队列中了。而队列的大小取决于消息以何种形式进行存储（内存或磁盘）。 &#160; &#160; &#160; 接着我们开始写一个简单的demo，若你是第一次使用RabbitMq，需要在官网上下载对应的RabbitMq服务。此服务依赖于erlang环境，所以还需要erlang安装包。 erlang22.0安装包（Windows） RabbitMq3.7.16安装包（Windows） &#160; &#160; &#160; 国外的下载源，下载速度较慢。若想下载Mac或者Linux环境，可以自行去官网搜索。 代码 &#160; &#160; &#160; 这里我使用的是java语言。首先新建一个maven工程，在pom文件中引入rabbitmq依赖： 1234567&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt; &lt;artifactId&gt;amqp-client&lt;/artifactId&gt; &lt;version&gt;5.5.1&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; &#160; &#160; &#160; 程序分为两个java类，对应生产者与消费者。他们有一些共同的代码片段，如下： 12ConnectionFactory factory = new ConnectionFactory();factory.setHost("localhost"); &#160; &#160; &#160; 新建一个ConnectionFactory工厂类，这个类的作用是生成一个Connection对象。在调用生成Connection对象的方法时（factory.newConnection()），该Connection对象就已经可以使用了，所以我们需要在调用前设置一系列连接参数，以确保该连接是我们所需要的。host正是其中一个参数，代表连接的主机名，由于我们是安装在本机，所以主机名为localhost。 &#160; &#160; &#160; 接下来生产者与消费者将出现区别。消费者需要监听队列，以确保当出现符合消费者要求的消息出现时，他能第一时间进行消费。所以消费者的服务器需要一直启动，即Connection连接不关闭。并且生产者与消费者对消息的处理逻辑上也不同，生产者发送消息，消费者使用消息。 Send.class： 12345678910111213141516171819202122232425public class Send &#123; //消息名称 private static final String QUEUE_NAME = "Hello"; public static void main(String[] args) throws Exception &#123; ConnectionFactory factory = new ConnectionFactory(); factory.setHost("localhost"); try(Connection connection = factory.newConnection(); Channel channel = connection.createChannel())&#123; String msg = "Start my mq travel!"; //第一个参数：队列名称 //第二个参数：是否持久化（该队列将在服务器重启后继续运行） //第三个参数：是否独占（仅限于本次连接） //第四个参数：是否自动删除（当不再使用后，服务器会自动删除该队列） //第五个参数：其他属性 channel.queueDeclare(QUEUE_NAME, false, false, false, null); //第一个参数：交换机名称 //第二个参数：队列名称 //第三个参数：消息的其他属性 //第四个参数：消息主体 channel.basicPublish("", QUEUE_NAME, null, msg.getBytes()); System.out.println("sent msg : " + msg); &#125; &#125;&#125; &#160; &#160; &#160; 生产者的这段程序，新建了一个Connection用来操作channel，channel对象是核心功能的入口。queueDeclare声明了一个队列，basicPublish用于发送消息。这两个方法中有许多参数，有一些是目前我们不需要管的，在之后的文章中会提到。 &#160; &#160; &#160; 这里要注意，新建Connection和Channel对象都是需要关闭连接的，这里我使用了try-with，在括号中定义的连接，在最后会被自动关闭，前提是Connection与Channel类实现了Closeable接口。try-with需要jdk版本在7以上，ide中若报错，那是因为没有在pom.xml中声明jdk版本。手动添加jdk版本即可。 Recv.class： 123456789101112131415161718192021222324252627public class Recv &#123; private static final String QUEUE_NAME = "Hello"; public static void main(String[] args) throws Exception &#123; ConnectionFactory factory = new ConnectionFactory(); factory.setHost("localhost"); Connection connection = factory.newConnection(); Channel channel = connection.createChannel(); //第一个参数：队列名称 //第二个参数：是否持久化（该队列将在服务器重启后继续运行） //第三个参数：是否独占（仅限于本次连接） //第四个参数：是否自动删除（当不再使用后，服务器会自动删除该队列） //第五个参数：其他属性 channel.queueDeclare(QUEUE_NAME, false, false, false, null); System.out.println("waiting for server..."); DeliverCallback callback = (consumerTag, message) -&gt; &#123; String msgFromQueue = new String(message.getBody(), StandardCharsets.UTF_8); System.out.println("It's now:" + new Date()); System.out.println("recvice:" + msgFromQueue); &#125;; //第一个参数：队列名称 //第二个参数：是否自动回复 //第三个参数：消息发送成功的回调函数 //第四个参数：当消费者被取消后的回调函数 channel.basicConsume(QUEUE_NAME, true, callback, consumerTag -&gt; &#123;&#125;); &#125;&#125; &#160; &#160; &#160; 消费者同样需要新建connection与channel对象，queueDeclare对象也是必要的。当前若存在queue，则不会声音队列，否则就新建一个队列。这样做的目的是防止启动消费者服务器，而没有启动生产者服务器时，当前没有队列，造成不必要的错误。由于消费者服务器不需要关闭，所以没有使用try-with。 &#160; &#160; &#160; 16行声明的是消息发送成功的回调函数，使用了jdk1.8中的函数式编程。DeliverCallBack实现了FunctionalInterface接口，所以可以用Lambda，25行的CancelCallBack同理。consumerTag是消费者参数，message是消息主体。 图2：消费者回调函数debug &#160; &#160; &#160; 消费者代码要做的就是接受消息并且处理消息，回调函数内定义了处理消息的逻辑。 先启动消费者，再启动生产者。运行结果： 图3：消费者服务器启动后信息 图4：生产者服务器启动后信息 图5：消费者接受到消息后信息 &#160; &#160; &#160; 我们可以打开cmd，执行RabbitMq命令，查看队列信息。打开RabbitMq安装目录下的sbin文件夹，在此处输入命令：rabbitmqctl.bat list_queues 图6：RabbitMq中的队列信息 &#160; &#160; &#160; name列指的是队列名称，Hello即是我们刚才新建的队列名。messages显示了消息数量，由于刚才的消息已经被消费者所消费，所以此处messages为0。现在我们关闭消费者服务器，再用生产者服务器发送一条信息，查看结果： 图7：生产者服务器再次发送消息 &#160; &#160; &#160; 可以看到此时messages数量为1。 总结 &#160; &#160; &#160; RabbitMq是一个基于生产者消费者模式的消息中间件。生产者与消费者之间通过队列进行完全的解耦。生产者不知道它发送的消息最终会发给哪个消费者，消费者也不知道自己所消费的消息来自哪个生产者。本文通过一个简单的案例，更直观的展示了RabbitMq的特点，以及RabbitMq Java Client的常用方法。]]></content>
      <categories>
        <category>消息中间件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[观察者模式]]></title>
    <url>%2Fcategories%2Fdesign-pattern%2F2019%2F0707-1333-a%2F</url>
    <content type="text"></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[红黑树]]></title>
    <url>%2Fcategories%2Falgorithm%2F2019%2F0707-1333-b%2F</url>
    <content type="text"></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
</search>
